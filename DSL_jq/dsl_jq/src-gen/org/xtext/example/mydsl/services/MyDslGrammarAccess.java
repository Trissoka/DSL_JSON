/*
 * generated by Xtext 2.28.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cSentencesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentencesFunParserRuleCall_0 = (RuleCall)cSentencesAssignment.eContents().get(0);
		
		//Model:
		//    sentences+=Fun*;
		@Override public ParserRule getRule() { return rule; }
		
		//sentences+=Fun*
		public Assignment getSentencesAssignment() { return cSentencesAssignment; }
		
		//Fun
		public RuleCall getSentencesFunParserRuleCall_0() { return cSentencesFunParserRuleCall_0; }
	}
	public class FunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fun");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCountJsonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReadJsonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWriteJsonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWriteCSVParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRemoveParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAddParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGetParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSortParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Fun:
		//    CountJson
		//    | ReadJson
		//    | WriteJson
		//    | WriteCSV
		//    | Remove
		//    | Add
		//    | Get
		//    | Sort
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CountJson
		//| ReadJson
		//| WriteJson
		//| WriteCSV
		//| Remove
		//| Add
		//| Get
		//| Sort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CountJson
		public RuleCall getCountJsonParserRuleCall_0() { return cCountJsonParserRuleCall_0; }
		
		//ReadJson
		public RuleCall getReadJsonParserRuleCall_1() { return cReadJsonParserRuleCall_1; }
		
		//WriteJson
		public RuleCall getWriteJsonParserRuleCall_2() { return cWriteJsonParserRuleCall_2; }
		
		//WriteCSV
		public RuleCall getWriteCSVParserRuleCall_3() { return cWriteCSVParserRuleCall_3; }
		
		//Remove
		public RuleCall getRemoveParserRuleCall_4() { return cRemoveParserRuleCall_4; }
		
		//Add
		public RuleCall getAddParserRuleCall_5() { return cAddParserRuleCall_5; }
		
		//Get
		public RuleCall getGetParserRuleCall_6() { return cGetParserRuleCall_6; }
		
		//Sort
		public RuleCall getSortParserRuleCall_7() { return cSortParserRuleCall_7; }
	}
	public class CountJsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CountJson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountJSONAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCountJSONCountKeyword_0_0 = (Keyword)cCountJSONAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CountJson : countJSON = "count" "("path=STRING")" ;
		@Override public ParserRule getRule() { return rule; }
		
		//countJSON = "count" "("path=STRING")"
		public Group getGroup() { return cGroup; }
		
		//countJSON = "count"
		public Assignment getCountJSONAssignment_0() { return cCountJSONAssignment_0; }
		
		//"count"
		public Keyword getCountJSONCountKeyword_0_0() { return cCountJSONCountKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//path=STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReadJsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ReadJson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadJSONAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReadJSONReadJSONKeyword_0_0 = (Keyword)cReadJSONAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReadJson : readJSON = "readJSON" "("path=STRING")";
		@Override public ParserRule getRule() { return rule; }
		
		//readJSON = "readJSON" "("path=STRING")"
		public Group getGroup() { return cGroup; }
		
		//readJSON = "readJSON"
		public Assignment getReadJSONAssignment_0() { return cReadJSONAssignment_0; }
		
		//"readJSON"
		public Keyword getReadJSONReadJSONKeyword_0_0() { return cReadJSONReadJSONKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//path=STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WriteJsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WriteJson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWriteJSONAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cWriteJSONWriteJSONKeyword_0_0 = (Keyword)cWriteJSONAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFileJSONParserRuleCall_4_0 = (RuleCall)cFileAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WriteJson : writeJSON = "writeJSON" "(" path=STRING "," file=JSON ")";
		@Override public ParserRule getRule() { return rule; }
		
		//writeJSON = "writeJSON" "(" path=STRING "," file=JSON ")"
		public Group getGroup() { return cGroup; }
		
		//writeJSON = "writeJSON"
		public Assignment getWriteJSONAssignment_0() { return cWriteJSONAssignment_0; }
		
		//"writeJSON"
		public Keyword getWriteJSONWriteJSONKeyword_0_0() { return cWriteJSONWriteJSONKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//path=STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//file=JSON
		public Assignment getFileAssignment_4() { return cFileAssignment_4; }
		
		//JSON
		public RuleCall getFileJSONParserRuleCall_4_0() { return cFileJSONParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class WriteCSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WriteCSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWriteCSVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cWriteCSVWriteCSVKeyword_0_0 = (Keyword)cWriteCSVAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTabNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTabNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cTabNameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHeaderAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHeaderSTRINGTerminalRuleCall_6_0 = (RuleCall)cHeaderAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutputFileAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutputFileSTRINGTerminalRuleCall_8_0 = (RuleCall)cOutputFileAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//WriteCSV: writeCSV = "writeCSV" "(" path=STRING "," tabName=STRING "," header=STRING "," outputFile=STRING ")";
		@Override public ParserRule getRule() { return rule; }
		
		//writeCSV = "writeCSV" "(" path=STRING "," tabName=STRING "," header=STRING "," outputFile=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//writeCSV = "writeCSV"
		public Assignment getWriteCSVAssignment_0() { return cWriteCSVAssignment_0; }
		
		//"writeCSV"
		public Keyword getWriteCSVWriteCSVKeyword_0_0() { return cWriteCSVWriteCSVKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//path=STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//tabName=STRING
		public Assignment getTabNameAssignment_4() { return cTabNameAssignment_4; }
		
		//STRING
		public RuleCall getTabNameSTRINGTerminalRuleCall_4_0() { return cTabNameSTRINGTerminalRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//header=STRING
		public Assignment getHeaderAssignment_6() { return cHeaderAssignment_6; }
		
		//STRING
		public RuleCall getHeaderSTRINGTerminalRuleCall_6_0() { return cHeaderSTRINGTerminalRuleCall_6_0; }
		
		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//outputFile=STRING
		public Assignment getOutputFileAssignment_8() { return cOutputFileAssignment_8; }
		
		//STRING
		public RuleCall getOutputFileSTRINGTerminalRuleCall_8_0() { return cOutputFileSTRINGTerminalRuleCall_8_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRemoveElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRemoveElementRemoveKeyword_0_0 = (Keyword)cRemoveElementAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdINTTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTabNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTabNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cTabNameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFileAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFileSTRINGTerminalRuleCall_6_0 = (RuleCall)cFileAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Remove : removeElement = "remove" "(" id=INT "," tabName=STRING "," file=STRING ")";
		@Override public ParserRule getRule() { return rule; }
		
		//removeElement = "remove" "(" id=INT "," tabName=STRING "," file=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//removeElement = "remove"
		public Assignment getRemoveElementAssignment_0() { return cRemoveElementAssignment_0; }
		
		//"remove"
		public Keyword getRemoveElementRemoveKeyword_0_0() { return cRemoveElementRemoveKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//id=INT
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_2_0() { return cIdINTTerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//tabName=STRING
		public Assignment getTabNameAssignment_4() { return cTabNameAssignment_4; }
		
		//STRING
		public RuleCall getTabNameSTRINGTerminalRuleCall_4_0() { return cTabNameSTRINGTerminalRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//file=STRING
		public Assignment getFileAssignment_6() { return cFileAssignment_6; }
		
		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_6_0() { return cFileSTRINGTerminalRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAddElementAddKeyword_0_0 = (Keyword)cAddElementAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileJSONParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdINTTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Add : addElement = "add" "(" file=JSON "," id=INT ")";
		@Override public ParserRule getRule() { return rule; }
		
		//addElement = "add" "(" file=JSON "," id=INT ")"
		public Group getGroup() { return cGroup; }
		
		//addElement = "add"
		public Assignment getAddElementAssignment_0() { return cAddElementAssignment_0; }
		
		//"add"
		public Keyword getAddElementAddKeyword_0_0() { return cAddElementAddKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=JSON
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//JSON
		public RuleCall getFileJSONParserRuleCall_2_0() { return cFileJSONParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//id=INT
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_4_0() { return cIdINTTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class GetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Get");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGetElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cGetElementGetKeyword_0_0 = (Keyword)cGetElementAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileJSONParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Get : getElement = "get" "("file=JSON "," ;
		@Override public ParserRule getRule() { return rule; }
		
		//getElement = "get" "("file=JSON ","
		public Group getGroup() { return cGroup; }
		
		//getElement = "get"
		public Assignment getGetElementAssignment_0() { return cGetElementAssignment_0; }
		
		//"get"
		public Keyword getGetElementGetKeyword_0_0() { return cGetElementGetKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//file=JSON
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//JSON
		public RuleCall getFileJSONParserRuleCall_2_0() { return cFileJSONParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSortSortKeyword_0_0 = (Keyword)cSortAssignment_0.eContents().get(0);
		private final Assignment cFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileJSONParserRuleCall_1_0 = (RuleCall)cFileAssignment_1.eContents().get(0);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeSTRINGTerminalRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		
		//Sort: sort = "sort" file=JSON "by" attribute=STRING ;
		@Override public ParserRule getRule() { return rule; }
		
		//sort = "sort" file=JSON "by" attribute=STRING
		public Group getGroup() { return cGroup; }
		
		//sort = "sort"
		public Assignment getSortAssignment_0() { return cSortAssignment_0; }
		
		//"sort"
		public Keyword getSortSortKeyword_0_0() { return cSortSortKeyword_0_0; }
		
		//file=JSON
		public Assignment getFileAssignment_1() { return cFileAssignment_1; }
		
		//JSON
		public RuleCall getFileJSONParserRuleCall_1_0() { return cFileJSONParserRuleCall_1_0; }
		
		//"by"
		public Keyword getByKeyword_2() { return cByKeyword_2; }
		
		//attribute=STRING
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//STRING
		public RuleCall getAttributeSTRINGTerminalRuleCall_3_0() { return cAttributeSTRINGTerminalRuleCall_3_0; }
	}
	public class JSONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.JSON");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cAttributeAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cAttributeIDTerminalRuleCall_0_1_0_0 = (RuleCall)cAttributeAssignment_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cAttributeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cAttributeSTRINGTerminalRuleCall_1_1_0_0 = (RuleCall)cAttributeAssignment_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Assignment cValueSTRAssignment_1_1_2_0 = (Assignment)cAlternatives_1_1_2.eContents().get(0);
		private final RuleCall cValueSTRSTRINGTerminalRuleCall_1_1_2_0_0 = (RuleCall)cValueSTRAssignment_1_1_2_0.eContents().get(0);
		private final Assignment cValueINTAssignment_1_1_2_1 = (Assignment)cAlternatives_1_1_2.eContents().get(1);
		private final RuleCall cValueINTINTTerminalRuleCall_1_1_2_1_0 = (RuleCall)cValueINTAssignment_1_1_2_1.eContents().get(0);
		private final Assignment cValueIDAssignment_1_1_2_2 = (Assignment)cAlternatives_1_1_2.eContents().get(2);
		private final RuleCall cValueIDIDTerminalRuleCall_1_1_2_2_0 = (RuleCall)cValueIDAssignment_1_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//JSON:
		//    "{" (attribute+=ID ";")+ "}"
		//    |"{" (attribute+=STRING "=" (valueSTR+=STRING | valueINT+=INT | valueID+=ID) ";")+ "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (attribute+=ID ";")+ "}"
		//|"{" (attribute+=STRING "=" (valueSTR+=STRING | valueINT+=INT | valueID+=ID) ";")+ "}"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"{" (attribute+=ID ";")+ "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//(attribute+=ID ";")+
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//attribute+=ID
		public Assignment getAttributeAssignment_0_1_0() { return cAttributeAssignment_0_1_0; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_0_1_0_0() { return cAttributeIDTerminalRuleCall_0_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1_1() { return cSemicolonKeyword_0_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//"{" (attribute+=STRING "=" (valueSTR+=STRING | valueINT+=INT | valueID+=ID) ";")+ "}"
		public Group getGroup_1() { return cGroup_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(attribute+=STRING "=" (valueSTR+=STRING | valueINT+=INT | valueID+=ID) ";")+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//attribute+=STRING
		public Assignment getAttributeAssignment_1_1_0() { return cAttributeAssignment_1_1_0; }
		
		//STRING
		public RuleCall getAttributeSTRINGTerminalRuleCall_1_1_0_0() { return cAttributeSTRINGTerminalRuleCall_1_1_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }
		
		//(valueSTR+=STRING | valueINT+=INT | valueID+=ID)
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }
		
		//valueSTR+=STRING
		public Assignment getValueSTRAssignment_1_1_2_0() { return cValueSTRAssignment_1_1_2_0; }
		
		//STRING
		public RuleCall getValueSTRSTRINGTerminalRuleCall_1_1_2_0_0() { return cValueSTRSTRINGTerminalRuleCall_1_1_2_0_0; }
		
		//valueINT+=INT
		public Assignment getValueINTAssignment_1_1_2_1() { return cValueINTAssignment_1_1_2_1; }
		
		//INT
		public RuleCall getValueINTINTTerminalRuleCall_1_1_2_1_0() { return cValueINTINTTerminalRuleCall_1_1_2_1_0; }
		
		//valueID+=ID
		public Assignment getValueIDAssignment_1_1_2_2() { return cValueIDAssignment_1_1_2_2; }
		
		//ID
		public RuleCall getValueIDIDTerminalRuleCall_1_1_2_2_0() { return cValueIDIDTerminalRuleCall_1_1_2_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final FunElements pFun;
	private final CountJsonElements pCountJson;
	private final ReadJsonElements pReadJson;
	private final WriteJsonElements pWriteJson;
	private final WriteCSVElements pWriteCSV;
	private final RemoveElements pRemove;
	private final AddElements pAdd;
	private final GetElements pGet;
	private final SortElements pSort;
	private final JSONElements pJSON;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFun = new FunElements();
		this.pCountJson = new CountJsonElements();
		this.pReadJson = new ReadJsonElements();
		this.pWriteJson = new WriteJsonElements();
		this.pWriteCSV = new WriteCSVElements();
		this.pRemove = new RemoveElements();
		this.pAdd = new AddElements();
		this.pGet = new GetElements();
		this.pSort = new SortElements();
		this.pJSON = new JSONElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    sentences+=Fun*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Fun:
	//    CountJson
	//    | ReadJson
	//    | WriteJson
	//    | WriteCSV
	//    | Remove
	//    | Add
	//    | Get
	//    | Sort
	//;
	public FunElements getFunAccess() {
		return pFun;
	}
	
	public ParserRule getFunRule() {
		return getFunAccess().getRule();
	}
	
	//CountJson : countJSON = "count" "("path=STRING")" ;
	public CountJsonElements getCountJsonAccess() {
		return pCountJson;
	}
	
	public ParserRule getCountJsonRule() {
		return getCountJsonAccess().getRule();
	}
	
	//ReadJson : readJSON = "readJSON" "("path=STRING")";
	public ReadJsonElements getReadJsonAccess() {
		return pReadJson;
	}
	
	public ParserRule getReadJsonRule() {
		return getReadJsonAccess().getRule();
	}
	
	//WriteJson : writeJSON = "writeJSON" "(" path=STRING "," file=JSON ")";
	public WriteJsonElements getWriteJsonAccess() {
		return pWriteJson;
	}
	
	public ParserRule getWriteJsonRule() {
		return getWriteJsonAccess().getRule();
	}
	
	//WriteCSV: writeCSV = "writeCSV" "(" path=STRING "," tabName=STRING "," header=STRING "," outputFile=STRING ")";
	public WriteCSVElements getWriteCSVAccess() {
		return pWriteCSV;
	}
	
	public ParserRule getWriteCSVRule() {
		return getWriteCSVAccess().getRule();
	}
	
	//Remove : removeElement = "remove" "(" id=INT "," tabName=STRING "," file=STRING ")";
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	//Add : addElement = "add" "(" file=JSON "," id=INT ")";
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Get : getElement = "get" "("file=JSON "," ;
	public GetElements getGetAccess() {
		return pGet;
	}
	
	public ParserRule getGetRule() {
		return getGetAccess().getRule();
	}
	
	//Sort: sort = "sort" file=JSON "by" attribute=STRING ;
	public SortElements getSortAccess() {
		return pSort;
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}
	
	//JSON:
	//    "{" (attribute+=ID ";")+ "}"
	//    |"{" (attribute+=STRING "=" (valueSTR+=STRING | valueINT+=INT | valueID+=ID) ";")+ "}"
	//;
	public JSONElements getJSONAccess() {
		return pJSON;
	}
	
	public ParserRule getJSONRule() {
		return getJSONAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
