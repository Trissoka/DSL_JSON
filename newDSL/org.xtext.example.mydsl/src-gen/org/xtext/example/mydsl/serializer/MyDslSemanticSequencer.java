/*
 * generated by Xtext 2.28.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Add;
import org.xtext.example.mydsl.myDsl.CountJson;
import org.xtext.example.mydsl.myDsl.Get;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PrintJson;
import org.xtext.example.mydsl.myDsl.ReadJson;
import org.xtext.example.mydsl.myDsl.Remove;
import org.xtext.example.mydsl.myDsl.Show;
import org.xtext.example.mydsl.myDsl.Sort;
import org.xtext.example.mydsl.myDsl.TypeInt;
import org.xtext.example.mydsl.myDsl.TypeJSON;
import org.xtext.example.mydsl.myDsl.TypeString;
import org.xtext.example.mydsl.myDsl.WriteCSV;
import org.xtext.example.mydsl.myDsl.WriteJson;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ADD:
				sequence_Add(context, (Add) semanticObject); 
				return; 
			case MyDslPackage.COUNT_JSON:
				sequence_CountJson(context, (CountJson) semanticObject); 
				return; 
			case MyDslPackage.GET:
				sequence_Get(context, (Get) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.PRINT_JSON:
				sequence_PrintJson(context, (PrintJson) semanticObject); 
				return; 
			case MyDslPackage.READ_JSON:
				sequence_ReadJson(context, (ReadJson) semanticObject); 
				return; 
			case MyDslPackage.REMOVE:
				sequence_Remove(context, (Remove) semanticObject); 
				return; 
			case MyDslPackage.SHOW:
				sequence_Show(context, (Show) semanticObject); 
				return; 
			case MyDslPackage.SORT:
				sequence_Sort(context, (Sort) semanticObject); 
				return; 
			case MyDslPackage.TYPE_INT:
				sequence_TypeInt(context, (TypeInt) semanticObject); 
				return; 
			case MyDslPackage.TYPE_JSON:
				sequence_TypeJSON(context, (TypeJSON) semanticObject); 
				return; 
			case MyDslPackage.TYPE_STRING:
				sequence_TypeString(context, (TypeString) semanticObject); 
				return; 
			case MyDslPackage.WRITE_CSV:
				sequence_WriteCSV(context, (WriteCSV) semanticObject); 
				return; 
			case MyDslPackage.WRITE_JSON:
				sequence_WriteJson(context, (WriteJson) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns Add
	 *     Add returns Add
	 *
	 * Constraint:
	 *     (addElement='add' value=TypeJSON)
	 * </pre>
	 */
	protected void sequence_Add(ISerializationContext context, Add semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ADD__ADD_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ADD__ADD_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ADD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ADD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddAccess().getAddElementAddKeyword_0_0(), semanticObject.getAddElement());
		feeder.accept(grammarAccess.getAddAccess().getValueTypeJSONParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns CountJson
	 *     CountJson returns CountJson
	 *
	 * Constraint:
	 *     (countJSON='count' value=TypeString)
	 * </pre>
	 */
	protected void sequence_CountJson(ISerializationContext context, CountJson semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COUNT_JSON__COUNT_JSON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COUNT_JSON__COUNT_JSON));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COUNT_JSON__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COUNT_JSON__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCountJsonAccess().getCountJSONCountKeyword_0_0(), semanticObject.getCountJSON());
		feeder.accept(grammarAccess.getCountJsonAccess().getValueTypeStringParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns Get
	 *     Get returns Get
	 *
	 * Constraint:
	 *     (getElement='get' id=STRING)
	 * </pre>
	 */
	protected void sequence_Get(ISerializationContext context, Get semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GET__GET_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GET__GET_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GET__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GET__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGetAccess().getGetElementGetKeyword_0_0(), semanticObject.getGetElement());
		feeder.accept(grammarAccess.getGetAccess().getIdSTRINGTerminalRuleCall_2_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     sentences+=Fun+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns PrintJson
	 *     PrintJson returns PrintJson
	 *
	 * Constraint:
	 *     (printJson='print' value=STRING)
	 * </pre>
	 */
	protected void sequence_PrintJson(ISerializationContext context, PrintJson semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PRINT_JSON__PRINT_JSON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PRINT_JSON__PRINT_JSON));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PRINT_JSON__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PRINT_JSON__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintJsonAccess().getPrintJsonPrintKeyword_0_0(), semanticObject.getPrintJson());
		feeder.accept(grammarAccess.getPrintJsonAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns ReadJson
	 *     ReadJson returns ReadJson
	 *
	 * Constraint:
	 *     (readJSON='read' path=STRING)
	 * </pre>
	 */
	protected void sequence_ReadJson(ISerializationContext context, ReadJson semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.READ_JSON__READ_JSON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.READ_JSON__READ_JSON));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.READ_JSON__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.READ_JSON__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReadJsonAccess().getReadJSONReadKeyword_0_0(), semanticObject.getReadJSON());
		feeder.accept(grammarAccess.getReadJsonAccess().getPathSTRINGTerminalRuleCall_2_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns Remove
	 *     Remove returns Remove
	 *
	 * Constraint:
	 *     (removeElement='remove' id=STRING)
	 * </pre>
	 */
	protected void sequence_Remove(ISerializationContext context, Remove semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REMOVE__REMOVE_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REMOVE__REMOVE_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REMOVE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REMOVE__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRemoveAccess().getRemoveElementRemoveKeyword_0_0(), semanticObject.getRemoveElement());
		feeder.accept(grammarAccess.getRemoveAccess().getIdSTRINGTerminalRuleCall_2_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns Show
	 *     Show returns Show
	 *
	 * Constraint:
	 *     (show='show' name=STRING?)
	 * </pre>
	 */
	protected void sequence_Show(ISerializationContext context, Show semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns Sort
	 *     Sort returns Sort
	 *
	 * Constraint:
	 *     (sort='sort' value=STRING attribute=STRING)
	 * </pre>
	 */
	protected void sequence_Sort(ISerializationContext context, Sort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SORT__SORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SORT__SORT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SORT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SORT__VALUE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SORT__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SORT__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSortAccess().getSortSortKeyword_0_0(), semanticObject.getSort());
		feeder.accept(grammarAccess.getSortAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getSortAccess().getAttributeSTRINGTerminalRuleCall_3_0(), semanticObject.getAttribute());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TypeReference returns TypeInt
	 *     TypeInt returns TypeInt
	 *
	 * Constraint:
	 *     val=INT
	 * </pre>
	 */
	protected void sequence_TypeInt(ISerializationContext context, TypeInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE_INT__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE_INT__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeIntAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TypeReference returns TypeJSON
	 *     TypeJSON returns TypeJSON
	 *
	 * Constraint:
	 *     ((attribute+=STRING value+=TypeReference)+ | (attribute+=STRING value+=TypeReference+)+ | (attribute+=STRING value+=TypeReference+)+)
	 * </pre>
	 */
	protected void sequence_TypeJSON(ISerializationContext context, TypeJSON semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TypeReference returns TypeString
	 *     TypeString returns TypeString
	 *
	 * Constraint:
	 *     val=STRING
	 * </pre>
	 */
	protected void sequence_TypeString(ISerializationContext context, TypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE_STRING__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE_STRING__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeStringAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns WriteCSV
	 *     WriteCSV returns WriteCSV
	 *
	 * Constraint:
	 *     (writeCVS='writeCSV' path=STRING value=TypeJSON?)
	 * </pre>
	 */
	protected void sequence_WriteCSV(ISerializationContext context, WriteCSV semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Fun returns WriteJson
	 *     WriteJson returns WriteJson
	 *
	 * Constraint:
	 *     (writeJSON='writeJSON' path=STRING value=TypeJSON?)
	 * </pre>
	 */
	protected void sequence_WriteJson(ISerializationContext context, WriteJson semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
